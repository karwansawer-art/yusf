name: Persistent RDP with Sync (6-Hour Stable)
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360
    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Set Timezone to Erbil/Baghdad
        run: |
          Set-TimeZone -Id "Arabic Standard Time"
          Write-Host "Timezone changed. Current time is: $(Get-Date)"

      - name: Create Fixed RDP User
        run: |
          $username = "yusf2000"
          $password = "yusf2000"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name $username -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          echo "RDP_USER=$username" >> $env:GITHUB_ENV
          echo "RDP_PASS=$password" >> $env:GITHUB_ENV

      - name: Install Software (choco & rclone)
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y googlechrome vscode 7zip rclone

      - name: Download Previous Session Files from Cloud
        if: secrets.RCLONE_CONF
        run: |
          Write-Host "Attempting to download previous session files..."
          $rcloneConfig = "${{ secrets.RCLONE_CONF }}"
          $configPath = "$env:APPDATA\rclone\rclone.conf"
          New-Item -Path (Split-Path $configPath) -ItemType Directory -Force
          Set-Content -Path $configPath -Value $rcloneConfig

          $remoteName = "gdrive1" # ⁄Ø€Ü⁄ïÿØÿ±ÿß ÿ®€Ü ŸÜÿßŸà€å remoteŸÄ€ï⁄©€ï€å ÿ™€Ü
          $backupFolder = "My_RDP_Backup"

          Write-Host "Downloading Desktop files..."
          rclone copy "$remoteName:$backupFolder/Desktop" "C:\Users\yusf2000\Desktop" --ignore-errors

          Write-Host "Downloading Documents files..."
          rclone copy "$remoteName:$backupFolder/Documents" "C:\Users\yusf2000\Documents" --ignore-errors

          Write-Host "File download process finished."

      - name: Install and Connect Tailscale
        run: |
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile "$env:TEMP\tailscale.exe"
          Start-Process "$env:TEMP\tailscale.exe" -ArgumentList "/S" -Wait
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV

      - name: Send RDP Info to Telegram
        if: secrets.TELEGRAM_BOT_TOKEN && secrets.TELEGRAM_CHAT_ID
        run: |
          $message = "‚úÖ RDP Session is Ready!%0A%0Aüñ•Ô∏è Address: ${{ env.TAILSCALE_IP }}%0Aüë§ Username: ${{ env.RDP_USER }}%0Aüîë Password: ${{ env.RDP_PASS }}"
          $botToken = "${{ secrets.TELEGRAM_BOT_TOKEN }}"
          $chatID = "${{ secrets.TELEGRAM_CHAT_ID }}"
          $url = "https://api.telegram.org/bot$botToken/sendMessage?chat_id=$chatID&text=$message"
          Invoke-RestMethod -Uri $url

      - name: Maintain Connection (Stable)
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER"
          Write-Host "Password: $env:RDP_PASS"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] Session is active. Keeping alive..."
              Start-Sleep -Seconds 60
          }

      - name: Upload Current Session Files to Cloud
        if: always() && secrets.RCLONE_CONF
        run: |
          Write-Host "Starting file upload process..."
          $rcloneConfig = "${{ secrets.RCLONE_CONF }}"
          $configPath = "$env:APPDATA\rclone\rclone.conf"
          New-Item -Path (Split-Path $configPath) -ItemType Directory -Force
          Set-Content -Path $configPath -Value $rcloneConfig

          $remoteName = "gdrive1" # ⁄Ø€Ü⁄ïÿØÿ±ÿß ÿ®€Ü ŸÜÿßŸà€å remoteŸÄ€ï⁄©€ï€å ÿ™€Ü
          $backupFolder = "My_RDP_Backup"

          Write-Host "Uploading Desktop folder..."
          rclone copy "C:\Users\yusf2000\Desktop" "$remoteName:$backupFolder/Desktop" --ignore-errors

          Write-Host "Uploading Documents folder..."
          rclone copy "C:\Users\yusf2000\Documents" "$remoteName:$backupFolder/Documents" --ignore-errors

          Write-Host "File upload finished."
